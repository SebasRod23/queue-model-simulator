{"version":3,"sources":["enums/QueueModelsOptions.ts","styles/styles.ts","components/InputQueueModel.tsx","components/PnCalculator.tsx","components/QueueModelCharacteristics.tsx","containers/Layout.tsx","App.tsx","index.tsx"],"names":["QueueModelsOptions","divStyleRows","css","display","flexDirection","gap","width","divStyleColumns","InputQueueModel","props","labels","lambda","mi","s","k","n","requiredByOption","map","inputStr","index","TextField","label","variant","required","InputProps","readOnly","lockInput","focused","undefined","onChange","event","name","strNumber","replace","number","Number","isNaN","updatedInputValues","inputValues","setInputValues","validateCompleteInput","handleInputChange","target","value","RandomsListDiv","RandomsListBox","border","borderRadius","PnCalculator","useState","setN","pns","setPns","Button","onClick","disabled","length","Box","height","Math","min","itemSize","itemCount","overscanCount","rowProps","style","ListItem","component","disablePadding","ListItemButton","navigator","clipboard","writeText","String","ListItemText","primary","data","random","filename","textDecoration","fullWidth","QueueModelCharacteristics","rho","l","lq","w","wq","lambdaE","pn","Object","keys","characteristicsData","characteristicKey","rootDivStyle","margin","Layout","emptyInputValues","mm1","mms","mmsk","mg1","optionQueueModel","setOptionQueueModel","inputNotComplete","setInputNotComplete","result","setResult","inputVals","check","forEach","key","clean","AppBar","position","Toolbar","Typography","color","FormControl","InputLabel","Select","option","inputProps","MenuItem","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f2b8ca1.chunk.js","sourcesContent":["export enum QueueModelsOptions {\n  mm1 = '1',\n  mms = '2',\n  mmsk = '3',\n  mg1 = '4',\n}\n","import { css } from '@mui/styled-engine';\n\nexport const divStyleRows = css({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '16px',\n  '& > *': {\n    width: '100%',\n  },\n});\n\nexport const divStyleColumns = css({\n  display: 'flex',\n  flexDirection: 'row',\n  gap: '16px',\n  '& > *': {\n    width: '100%',\n  },\n  '@media (max-width: 550px)': {\n    flexDirection: 'column',\n  },\n});\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { TextField } from '@mui/material';\n\nimport { InputValues, ObjectWithKeyStr } from '../interfaces/types';\nimport { divStyleColumns } from '../styles/styles';\n\ninterface InputQueueModelProps {\n  inputValues: InputValues;\n  setInputValues: React.Dispatch<React.SetStateAction<InputValues>>;\n  requiredByOption: string[];\n  validateCompleteInput: (\n    inputVals: InputValues,\n    numOfRan?: string | undefined,\n  ) => void;\n  lockInput: boolean;\n}\n\nconst InputQueueModel = (props: InputQueueModelProps) => {\n  const labels: ObjectWithKeyStr = {\n    lambda: 'λ',\n    mi: 'μ',\n    s: 's',\n    k: 'k',\n    n: 'n',\n  };\n\n  const handleInputChange = (name: string, strNumber: string) => {\n    strNumber = strNumber.replace(/[ ]/g, '');\n    const number = Number(strNumber);\n    if (isNaN(number) && strNumber !== '') return;\n\n    const updatedInputValues = { ...props.inputValues, [name]: strNumber };\n\n    props.setInputValues(updatedInputValues);\n    props.validateCompleteInput(updatedInputValues);\n  };\n\n  return (\n    <div css={divStyleColumns}>\n      {props.requiredByOption.map((inputStr, index) => (\n        <TextField\n          key={`input-${index}-${inputStr}`}\n          label={labels[inputStr]}\n          variant='outlined'\n          required\n          InputProps={{\n            readOnly: props.lockInput,\n          }}\n          focused={props.lockInput ? false : undefined}\n          onChange={(event) => handleInputChange(inputStr, event.target.value)}\n          value={props.inputValues[inputStr]}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default InputQueueModel;\n","/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react';\nimport { css } from '@emotion/react';\nimport {\n  TextField,\n  Button,\n  ListItem,\n  ListItemButton,\n  ListItemText,\n} from '@mui/material';\nimport { FixedSizeList, ListChildComponentProps } from 'react-window';\nimport { Box } from '@mui/system';\nimport { CSVLink } from 'react-csv';\n\nimport { divStyleRows } from '../styles/styles';\n\nconst RandomsListDiv = css({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '16px',\n});\n\nconst RandomsListBox = css({\n  border: '1px solid #ccc',\n  borderRadius: '4px',\n  '&:hover': {\n    border: '1px solid black',\n  },\n});\n\nconst PnCalculator = () => {\n  const [n, setN] = useState('');\n  const [pns, setPns] = useState<number[]>([]);\n\n  const rowHeight = 30;\n\n  const renderRow = (rowProps: ListChildComponentProps) => {\n    const { index, style } = rowProps;\n\n    return (\n      <ListItem style={style} key={index} component='div' disablePadding>\n        <ListItemButton\n          style={{ height: `${rowHeight}px` }}\n          onClick={() => {\n            navigator.clipboard.writeText(String(pns[index]));\n          }}\n        >\n          <ListItemText primary={`P${index}`} />\n          <ListItemText primary={`${pns[index]}`} />\n        </ListItemButton>\n      </ListItem>\n    );\n  };\n\n  const handleInputChange = (strNumber: string) => {\n    strNumber = strNumber.replace(/[ .]/g, '');\n    const number = Number(strNumber);\n    if (isNaN(number) && strNumber !== '') return;\n\n    setN(strNumber);\n  };\n\n  const getPn = () => {\n    setPns([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n  };\n\n  return (\n    <>\n      <h1>Pn Calculator</h1>\n      <form css={divStyleRows}>\n        <TextField\n          label={'Calculate up to n'}\n          variant='outlined'\n          required\n          value={n}\n          onChange={(event) => handleInputChange(event.target.value)}\n        />\n        <Button variant='contained' onClick={getPn} disabled={n === ''}>\n          Calculate up to n\n        </Button>\n      </form>\n\n      <br />\n      <br />\n\n      {pns.length > 0 && (\n        <div css={RandomsListDiv}>\n          <Box css={RandomsListBox}>\n            <FixedSizeList\n              height={Math.min(300, pns.length * 30)}\n              width='100%'\n              itemSize={rowHeight}\n              itemCount={pns.length}\n              overscanCount={10}\n            >\n              {renderRow}\n            </FixedSizeList>\n          </Box>\n\n          <CSVLink\n            data={[\n              ['Pn', 'Value'],\n              ...pns.map((random, index) => [index, random]),\n            ]}\n            filename='pn.csv'\n            style={{ textDecoration: 'none' }}\n          >\n            <Button variant='outlined' fullWidth>\n              Save as CSV\n            </Button>\n          </CSVLink>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default PnCalculator;\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { TextField } from '@mui/material';\n\nimport { divStyleColumns } from '../styles/styles';\nimport { QueueData } from '../interfaces/types';\n\ninterface QueueModelCharacteristicsProps {\n  characteristicsData: QueueData;\n}\n\nconst QueueModelCharacteristics = (props: QueueModelCharacteristicsProps) => {\n  const labels: { [key: string]: string } = {\n    rho: 'ρ',\n    l: 'L',\n    lq: 'Lq',\n    w: 'W',\n    wq: 'Wq',\n    lambdaE: 'λe',\n    pn: 'Pn',\n  };\n\n  return (\n    <>\n      <h1>Queue Model Characteristics</h1>\n      <div css={divStyleColumns}>\n        {Object.keys(props.characteristicsData).map(\n          (characteristicKey, index) => (\n            <TextField\n              key={`input-${index}-${characteristicKey}`}\n              label={labels[characteristicKey]}\n              variant='outlined'\n              required\n              InputProps={{\n                readOnly: true,\n              }}\n              focused={false}\n              value={props.characteristicsData[characteristicKey]}\n            />\n          ),\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default QueueModelCharacteristics;\n","/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react';\nimport { css } from '@emotion/react';\nimport {\n  AppBar,\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  Toolbar,\n  Typography,\n} from '@mui/material';\n\nimport InputQueueModel from '../components/InputQueueModel';\nimport PnCalculator from '../components/PnCalculator';\nimport QueueModelCharacteristics from '../components/QueueModelCharacteristics';\nimport { QueueModelsOptions } from '../enums/QueueModelsOptions';\nimport { InputValues, QueueData } from '../interfaces/types';\nimport { divStyleRows } from '../styles/styles';\n\nconst rootDivStyle = css({\n  margin: '32px 24px',\n  '@media (max-width: 600px)': {\n    margin: '24px 16px',\n  },\n  '& > *': {\n    width: '100%',\n  },\n});\n\nconst Layout = () => {\n  const emptyInputValues = { lambda: '', mi: '', s: '', k: '', n: '' };\n\n  let requiredByOption: { [key: string]: string[] } = {\n    [QueueModelsOptions.mm1]: ['lambda', 'mi', 'n'],\n    [QueueModelsOptions.mms]: ['lambda', 'mi', 's', 'n'],\n    [QueueModelsOptions.mmsk]: ['lambda', 'mi', 's', 'k', 'n'],\n    [QueueModelsOptions.mg1]: ['lambda', 'mi', 'n'],\n  };\n\n  const [optionQueueModel, setOptionQueueModel] = useState<string>('1');\n  const [inputValues, setInputValues] = useState<InputValues>(emptyInputValues);\n\n  const [inputNotComplete, setInputNotComplete] = useState(true);\n\n  const [result, setResult] = useState<undefined | QueueData>();\n\n  const handleQueueModelChange = (event: SelectChangeEvent) => {\n    const option = event.target.value;\n\n    setOptionQueueModel(option);\n\n    clean();\n  };\n\n  const validateCompleteInput = (inputVals: InputValues) => {\n    let check = true;\n\n    requiredByOption[optionQueueModel].forEach((key) => {\n      check = check && (inputVals as InputValues)[key] !== '';\n    });\n\n    setInputNotComplete(!check);\n  };\n\n  const calculate = () => {\n    setResult({\n      rho: 5,\n      l: 5,\n      lq: 5,\n      w: 5,\n      wq: 5,\n      lambdaE: 5,\n      pn: '(1/3)n',\n    } as QueueData);\n  };\n\n  const clean = () => {\n    setInputValues(emptyInputValues);\n    validateCompleteInput(emptyInputValues);\n    setResult(undefined);\n  };\n\n  return (\n    <>\n      <header>\n        <AppBar position='static'>\n          <Toolbar variant='dense'>\n            <Typography variant='h6' color='inherit' component='div'>\n              Queue Model Simulator\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </header>\n      <div css={rootDivStyle}>\n        <form css={divStyleRows}>\n          <FormControl fullWidth focused={result ? false : undefined}>\n            <InputLabel>Queue Model</InputLabel>\n            <Select\n              value={optionQueueModel}\n              label='Queue Model'\n              onChange={handleQueueModelChange}\n              inputProps={{\n                readOnly: result !== undefined,\n              }}\n            >\n              <MenuItem value={QueueModelsOptions.mm1}>M/M/1</MenuItem>\n              <MenuItem value={QueueModelsOptions.mms}>M/M/s</MenuItem>\n              <MenuItem value={QueueModelsOptions.mmsk}>M/M/s/K</MenuItem>\n              <MenuItem value={QueueModelsOptions.mg1}>M/G/1</MenuItem>\n            </Select>\n          </FormControl>\n\n          <br />\n\n          <InputQueueModel\n            inputValues={inputValues}\n            setInputValues={\n              setInputValues as React.Dispatch<\n                React.SetStateAction<InputValues>\n              >\n            }\n            validateCompleteInput={validateCompleteInput}\n            requiredByOption={requiredByOption[optionQueueModel]}\n            lockInput={result !== undefined}\n          />\n\n          {!result && (\n            <Button\n              variant='contained'\n              disabled={inputNotComplete}\n              onClick={calculate}\n            >\n              Calculate\n            </Button>\n          )}\n\n          {result && (\n            <Button variant='contained' color='error' onClick={clean}>\n              Start again\n            </Button>\n          )}\n        </form>\n\n        <br />\n\n        {result && (\n          <>\n            <QueueModelCharacteristics characteristicsData={result} />\n\n            <br />\n\n            <PnCalculator />\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport Layout from './containers/Layout';\n\nfunction App() {\n  return (\n    <div>\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
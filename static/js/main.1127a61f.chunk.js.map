{"version":3,"sources":["enums/QueueModelsOptions.ts","styles/styles.ts","components/InputQueueModel.tsx","containers/Layout.tsx","App.tsx","index.tsx"],"names":["QueueModelsOptions","divStyleRows","css","display","flexDirection","gap","width","divStyleColumns","queueModelInputsStyle","flexGrow","InputQueueModel","props","labels","lambda","mi","s","k","n","requiredByOption","map","inputStr","index","TextField","label","variant","required","onChange","event","name","strNumber","replace","number","Number","isNaN","updatedInputValues","inputValues","setInputValues","validateCompleteInput","handleInputChange","target","value","rootDivStyle","margin","Layout","emptyInputValues","mm1","mms","mmsk","mg1","useState","optionQueueModel","setOptionQueueModel","inputNotComplete","setInputNotComplete","inputVals","check","forEach","key","AppBar","position","Toolbar","Typography","color","component","FormControl","fullWidth","InputLabel","Select","option","MenuItem","Button","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1127a61f.chunk.js","sourcesContent":["export enum QueueModelsOptions {\n  mm1 = '1',\n  mms = '2',\n  mmsk = '3',\n  mg1 = '4',\n}\n","import { css } from '@mui/styled-engine';\n\nexport const divStyleRows = css({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '16px',\n  '& > *': {\n    width: '100%',\n  },\n});\n\nexport const divStyleColumns = css({\n  display: 'flex',\n  flexDirection: 'row',\n  gap: '16px',\n  '& > *': {\n    width: '100%',\n  },\n  '@media (max-width: 550px)': {\n    flexDirection: 'column',\n  },\n});\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { css } from '@mui/styled-engine';\nimport { TextField } from '@mui/material';\n\nimport { InputValues } from '../interfaces/types';\nimport { divStyleColumns } from '../styles/styles';\n\nconst queueModelInputsStyle = css({\n  ...divStyleColumns,\n  '& > *': {\n    flexGrow: 1,\n  },\n});\n\ninterface InputQueueModelProps {\n  inputValues: InputValues;\n  setInputValues: React.Dispatch<React.SetStateAction<InputValues>>;\n  requiredByOption: string[];\n  validateCompleteInput: (\n    inputVals: InputValues,\n    numOfRan?: string | undefined,\n  ) => void;\n}\n\nconst InputQueueModel = (props: InputQueueModelProps) => {\n  const labels: { [key: string]: string } = {\n    lambda: 'λ',\n    mi: 'μ',\n    s: 's',\n    k: 'k',\n    n: 'n',\n  };\n\n  const handleInputChange = (name: string, strNumber: string) => {\n    strNumber = strNumber.replace(/[ ]/g, '');\n    const number = Number(strNumber);\n    if (isNaN(number) && strNumber !== '') return;\n\n    const updatedInputValues = { ...props.inputValues, [name]: strNumber };\n\n    props.setInputValues(updatedInputValues);\n    props.validateCompleteInput(updatedInputValues);\n  };\n\n  return (\n    <div css={queueModelInputsStyle}>\n      {props.requiredByOption.map((inputStr, index) => (\n        <TextField\n          key={`input-${index}-${inputStr}`}\n          label={labels[inputStr]}\n          variant='outlined'\n          required\n          onChange={(event) => handleInputChange(inputStr, event.target.value)}\n          value={props.inputValues[inputStr]}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default InputQueueModel;\n","/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react';\nimport { css } from '@emotion/react';\nimport {\n  AppBar,\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  Toolbar,\n  Typography,\n} from '@mui/material';\n\nimport { QueueModelsOptions } from '../enums/QueueModelsOptions';\nimport { divStyleRows } from '../styles/styles';\nimport InputQueueModel from '../components/InputQueueModel';\nimport { InputValues } from '../interfaces/types';\n\nconst rootDivStyle = css({\n  margin: '32px 24px',\n  '@media (max-width: 600px)': {\n    margin: '24px 16px',\n  },\n  '& > *': {\n    width: '100%',\n  },\n});\n\nconst Layout = () => {\n  const emptyInputValues = { lambda: '', mi: '', s: '', k: '', n: '' };\n\n  let requiredByOption: { [key: string]: string[] } = {\n    [QueueModelsOptions.mm1]: ['lambda', 'mi', 'n'],\n    [QueueModelsOptions.mms]: ['lambda', 'mi', 's', 'n'],\n    [QueueModelsOptions.mmsk]: ['lambda', 'mi', 's', 'k', 'n'],\n    [QueueModelsOptions.mg1]: ['lambda', 'mi', 'n'],\n  };\n\n  const [optionQueueModel, setOptionQueueModel] = useState<string>('1');\n  const [inputValues, setInputValues] = useState<InputValues>(emptyInputValues);\n\n  const [inputNotComplete, setInputNotComplete] = useState(true);\n\n  const handleQueueModelChange = (event: SelectChangeEvent) => {\n    const option = event.target.value;\n\n    setOptionQueueModel(option);\n\n    setInputValues(emptyInputValues);\n    validateCompleteInput(emptyInputValues);\n  };\n\n  const validateCompleteInput = (inputVals: InputValues) => {\n    let check = true;\n\n    requiredByOption[optionQueueModel].forEach((key) => {\n      check = check && (inputVals as InputValues)[key] !== '';\n    });\n\n    setInputNotComplete(!check);\n  };\n\n  return (\n    <>\n      <header>\n        <AppBar position='static'>\n          <Toolbar variant='dense'>\n            <Typography variant='h6' color='inherit' component='div'>\n              Queue Model Simulator\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </header>\n      <div css={rootDivStyle}>\n        <form css={divStyleRows}>\n          <FormControl fullWidth>\n            <InputLabel>Queue Model</InputLabel>\n            <Select\n              value={optionQueueModel}\n              label='Queue Model'\n              onChange={handleQueueModelChange}\n            >\n              <MenuItem value={QueueModelsOptions.mm1}>M/M/1</MenuItem>\n              <MenuItem value={QueueModelsOptions.mms}>M/M/s</MenuItem>\n              <MenuItem value={QueueModelsOptions.mmsk}>M/M/s/K</MenuItem>\n              <MenuItem value={QueueModelsOptions.mg1}>M/G/1</MenuItem>\n            </Select>\n          </FormControl>\n\n          <br />\n\n          <InputQueueModel\n            inputValues={inputValues}\n            setInputValues={\n              setInputValues as React.Dispatch<\n                React.SetStateAction<InputValues>\n              >\n            }\n            validateCompleteInput={validateCompleteInput}\n            requiredByOption={requiredByOption[optionQueueModel]}\n          />\n\n          <Button variant='contained' disabled={inputNotComplete}>\n            Calculate\n          </Button>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport Layout from './containers/Layout';\n\nfunction App() {\n  return (\n    <div>\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}